// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Student_Management.Models;

#nullable disable

namespace StudentManagement.Migrations
{
    [DbContext(typeof(U669885128UZsNtContext))]
    partial class U669885128UZsNtContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("PointCartier", b =>
                {
                    b.Property<int>("IdCartier")
                        .HasColumnType("int(11)");

                    b.Property<int>("PointDeRecherche")
                        .HasColumnType("int(11)");

                    b.HasKey("IdCartier", "PointDeRecherche")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdCartier" }, "id_cartier");

                    b.HasIndex(new[] { "PointDeRecherche" }, "point_de_recherche");

                    b.ToTable("point_cartier", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models.Abonnement", b =>
                {
                    b.Property<int>("IdAbonnement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_abonnement");

                    b.Property<DateOnly>("DateDeCreation")
                        .HasColumnType("date")
                        .HasColumnName("Date_de_creation");

                    b.Property<double>("Solde")
                        .HasColumnType("double");

                    b.Property<int>("StudentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Student_Id");

                    b.Property<string>("TypeAbonnement")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Type_abonnement");

                    b.HasKey("IdAbonnement")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StudentId" }, "student_Id");

                    b.ToTable("abonnement", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models.AbonnementLigne", b =>
                {
                    b.Property<int>("IdAbnLigne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_abn_ligne");

                    b.Property<int>("AbonnementId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Abonnement_id");

                    b.Property<int>("LigneId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Ligne_id");

                    b.HasKey("IdAbnLigne")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AbonnementId" }, "abonnement_id");

                    b.ToTable("abonnement/ligne", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models.Aiuser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("AIusers", (string)null);
                });

            modelBuilder.Entity("Student_Management.Models.AudioDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int?>("AiuserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("AIuserId");

                    b.Property<byte[]>("Audio")
                        .HasColumnType("blob")
                        .HasColumnName("audio");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AiuserId" }, "fk_AIuserId");

                    b.ToTable("audio_data", (string)null);
                });

            modelBuilder.Entity("Student_Management.Models.BannedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<DateTime>("BannedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("banned_at")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("reason");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("BannedUsers");
                });

            modelBuilder.Entity("Student_Management.Models.BorderCartier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("IdCartier")
                        .HasColumnType("int(11)")
                        .HasColumnName("id_cartier");

                    b.Property<double>("Lattitude")
                        .HasColumnType("double")
                        .HasColumnName("lattitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCartier" }, "id_cartier")
                        .HasDatabaseName("id_cartier1");

                    b.ToTable("border_cartier", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models.Cartier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("libelle");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("cartier", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models.Historique", b =>
                {
                    b.Property<int>("IdHistorique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_historique");

                    b.Property<int>("BusId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Bus_id");

                    b.Property<TimeOnly>("HeureMonter")
                        .HasColumnType("time")
                        .HasColumnName("Heure_monter");

                    b.Property<int>("StudentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("Student_id");

                    b.HasKey("IdHistorique")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StudentId" }, "Student_id");

                    b.ToTable("historique", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models.Pc", b =>
                {
                    b.Property<int>("PcId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pc_id");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<int>("Price")
                        .HasColumnType("int(100)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('available','in_use','out_use')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'available'");

                    b.HasKey("PcId")
                        .HasName("PRIMARY");

                    b.ToTable("pcs", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models.PointDeRecherche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<double>("Lattitude")
                        .HasColumnType("double")
                        .HasColumnName("lattitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("neighborhood");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("point_de_recherche", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models.Ps4", b =>
                {
                    b.Property<int>("Ps4Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ps4_id");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<int>("Price")
                        .HasColumnType("int(100)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('available','in_use','out_use')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'available'");

                    b.HasKey("Ps4Id")
                        .HasName("PRIMARY");

                    b.ToTable("ps4s", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models.Student", b =>
                {
                    b.Property<int>("IdStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_student");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cartier")
                        .HasColumnType("int(11)")
                        .HasColumnName("cartier");

                    b.Property<string>("Cen")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Cin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Etat")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdStudent")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Cartier" }, "cartier");

                    b.ToTable("student", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("Student_Management.Models._1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("1", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("PointCartier", b =>
                {
                    b.HasOne("Student_Management.Models.Cartier", null)
                        .WithMany()
                        .HasForeignKey("IdCartier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("point_cartier_ibfk_1");

                    b.HasOne("Student_Management.Models.PointDeRecherche", null)
                        .WithMany()
                        .HasForeignKey("PointDeRecherche")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("point_cartier_ibfk_2");
                });

            modelBuilder.Entity("Student_Management.Models.Abonnement", b =>
                {
                    b.HasOne("Student_Management.Models.Student", "Student")
                        .WithMany("Abonnements")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("abonnement_ibfk_1");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Student_Management.Models.AbonnementLigne", b =>
                {
                    b.HasOne("Student_Management.Models.Abonnement", "Abonnement")
                        .WithMany("AbonnementLignes")
                        .HasForeignKey("AbonnementId")
                        .IsRequired()
                        .HasConstraintName("abonnement/ligne_ibfk_2");

                    b.Navigation("Abonnement");
                });

            modelBuilder.Entity("Student_Management.Models.AudioDatum", b =>
                {
                    b.HasOne("Student_Management.Models.Aiuser", "Aiuser")
                        .WithMany("AudioData")
                        .HasForeignKey("AiuserId")
                        .HasConstraintName("fk_AIuserId");

                    b.Navigation("Aiuser");
                });

            modelBuilder.Entity("Student_Management.Models.BannedUser", b =>
                {
                    b.HasOne("Student_Management.Models.Aiuser", "User")
                        .WithMany("BannedUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("BannedUsers_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Student_Management.Models.BorderCartier", b =>
                {
                    b.HasOne("Student_Management.Models.Cartier", "IdCartierNavigation")
                        .WithMany("BorderCartiers")
                        .HasForeignKey("IdCartier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("border_cartier_ibfk_1");

                    b.Navigation("IdCartierNavigation");
                });

            modelBuilder.Entity("Student_Management.Models.Historique", b =>
                {
                    b.HasOne("Student_Management.Models.Student", "Student")
                        .WithMany("Historiques")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("historique_ibfk_1");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Student_Management.Models.Student", b =>
                {
                    b.HasOne("Student_Management.Models.Cartier", "CartierNavigation")
                        .WithMany("Students")
                        .HasForeignKey("Cartier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("student_ibfk_1");

                    b.Navigation("CartierNavigation");
                });

            modelBuilder.Entity("Student_Management.Models.Abonnement", b =>
                {
                    b.Navigation("AbonnementLignes");
                });

            modelBuilder.Entity("Student_Management.Models.Aiuser", b =>
                {
                    b.Navigation("AudioData");

                    b.Navigation("BannedUsers");
                });

            modelBuilder.Entity("Student_Management.Models.Cartier", b =>
                {
                    b.Navigation("BorderCartiers");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Student_Management.Models.Student", b =>
                {
                    b.Navigation("Abonnements");

                    b.Navigation("Historiques");
                });
#pragma warning restore 612, 618
        }
    }
}
